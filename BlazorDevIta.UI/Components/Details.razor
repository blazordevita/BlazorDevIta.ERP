@typeparam DetailsType

<div class="container">

    <h3>Details @valueHeaderPropertyName</h3>

    <EditForm Model="@Item" OnValidSubmit="@(() => OnSave.InvokeAsync(Item))">
        <DataAnnotationsValidator />

        @if (Fields != null && Item != null)
        {
            @Fields(Item)
            ;
        }

        <div class="mt-4">
            <button type="button" class="btn btn-default" @onclick="OnCancel">Cancel</button>
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </EditForm>
</div>

@code {

    [Parameter]
    public string? HeaderPropertyName { get; set; }

    [Parameter]
    public RenderFragment<DetailsType>? Fields { get; set; }

    [Parameter]
    public DetailsType? Item { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<DetailsType> OnSave { get; set; }

    private string? valueHeaderPropertyName;

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(HeaderPropertyName))
        {
            valueHeaderPropertyName = typeof(DetailsType)
                ?.GetProperty(HeaderPropertyName)
                ?.GetValue(Item)
                ?.ToString();
        }
        else valueHeaderPropertyName = null;
    }


}
