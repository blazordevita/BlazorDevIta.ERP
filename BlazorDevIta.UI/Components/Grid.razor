@typeparam IdType
@typeparam GridItemType where GridItemType: BaseListItem<IdType>
@inject IConfirmService ConfirmService

<h1>List Items</h1>

<button class="btn btn-primary" @onclick="OnCreate">
    Create Item
</button>

<input type="text" class="form-control"
    @bind-value="pageParameters.FilterText"
    @onkeyup="@(async (e) => { if (e.Key == "Enter") await OnPageRequest.InvokeAsync(pageParameters); })" />

@if (Page?.Items?.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                @foreach (var property in properties)
                {
                    var display = property.GetCustomAttribute<DisplayAttribute>();

                    var notOrderable= property.GetCustomAttribute<NotOrderableAttribute>();

                    if(notOrderable == null)
                    {
                        <th class="th-sort" @onclick="() => RequireColumnSort(property.Name)">
                        <i class="@(Page.OrderBy == property.Name 
                                ? Page.OrderByDirection == OrderDirection.Ascendent 
                                    ? " oi oi-sort-ascending" : " oi oi-sort-descending"
                                : null)"></i>
                           
                        @(display == null ? property.Name : display.Name)
                        </th>
                    }
                    else
                    {
                        <th>@(display == null ? property.Name : display.Name)</th>
                    }
                    
                }
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Page.Items)
            {
                <tr>
                    @foreach (var property in properties)
                    {
                        var value = property.GetValue(item);
                        var displayFormat = property.GetCustomAttribute<DisplayFormatAttribute>();
                        <td>
                            @(displayFormat?.DataFormatString == null 
                                ? value 
                                : string.Format(displayFormat.DataFormatString, value))
                        </td>
                    }
                    <td>
                        <button class="btn btn-warning"
                        @onclick="@(() => OnEdit.InvokeAsync(item))">
                            Edit
                        </button>
                        <button class="btn btn-danger"
                        @onclick="@(() => RequestDelete(item))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav>
      <ul class="pagination">
        <li class="page-item" @onclick="() => RequestPage(1)">
            <a class="page-link">First</a>
        </li>
        
        @for(var page = 1; page <= Page.PageCount; page++)
        {
            var currentPage = page;
            <li class="page-item @(Page.CurrentPage == currentPage ? "active" : null)" 
                @onclick="() => RequestPage(currentPage)">
                <a class="page-link">@currentPage</a>
            </li>
        }
        
        <li class="page-item" @onclick="() => RequestPage(Page.PageCount)">
            <a class="page-link">Last</a>
        </li>
      </ul>
    </nav>
}
else
{
    <span>No data available</span>
}

<Confirm ConfirmId="GridConfirm" OnConfirm="ConfirmDelete" />

@code {
    private GridItemType? itemToDelete = null;

    public async Task RequestDelete(GridItemType item)
    {
        itemToDelete = item;

        if(ConfirmService is not null)
            await ConfirmService.ShowConfirm("GridConfirm");
    }

    public async Task ConfirmDelete()
    {
        if(itemToDelete is not null)
            await OnDelete.InvokeAsync(itemToDelete);

        if(ConfirmService is not null)
            await ConfirmService.HideConfirm("GridConfirm");
    }

    private PropertyInfo[] properties = typeof(GridItemType).GetProperties()
        .Where(x => x.GetCustomAttribute<HiddenAttribute>() == null)
        .ToArray();

    private PageParameters pageParameters = new PageParameters();

    [Parameter]
    public Page<GridItemType, IdType>? Page { get; set; }

    [Parameter]
    public EventCallback OnCreate { get; set; }

    [Parameter]
    public EventCallback<GridItemType> OnEdit { get; set; }

    [Parameter]
    public EventCallback<GridItemType> OnDelete { get; set; }

    [Parameter]
    public EventCallback<PageParameters> OnPageRequest { get; set; }

    public async Task RequireColumnSort(string propertyName)
    {
        if(pageParameters.OrderBy != propertyName)
        {
            pageParameters.OrderBy = propertyName;
            pageParameters.OrderByDirection = OrderDirection.Descendent;
        }
        else
        {
            pageParameters.OrderByDirection =
                pageParameters.OrderByDirection == OrderDirection.Descendent
                    ? OrderDirection.Ascendent : OrderDirection.Descendent;
        }

        pageParameters.Page = 1;

        await OnPageRequest.InvokeAsync(pageParameters);
    }

    public async Task RequestPage(int page)
    {
        pageParameters.Page = page;
        await OnPageRequest.InvokeAsync(pageParameters);
    }

}
