@typeparam IdType
@typeparam GridItemType where GridItemType: BaseListItem<IdType>

<h1>List Items</h1>

<button class="btn btn-primary" @onclick="OnCreate">
    Create Item
</button>

@if (Page?.Items?.Count > 0)
{
    <table class="table mt-2">
        <thead>
            <tr>
                @foreach (var property in properties)
                {
                    var display = property.GetCustomAttribute<DisplayAttribute>();

                    var notOrderable = property.GetCustomAttribute<NotOrderableAttribute>();

                    if (notOrderable == null)
                    {
                        <th class="th-sort" @onclick="() => RequireColumnSort(property)">
                            @(display == null ? property.Name : display.Name) @SetSortIcon(property.Name)
                        </th>
                    }
                    else
                    {
                        <th>
                            @(display == null ? property.Name : display.Name)
                        </th>
                    }

                }
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Page.Items)
            {
                <tr>
                    @foreach (var property in properties)
                    {
                        var value = property.GetValue(item);
                        var displayFormat = property.GetCustomAttribute<DisplayFormatAttribute>();
                        <td>
                            @(displayFormat?.DataFormatString == null
                ? value
                : string.Format(displayFormat.DataFormatString, value))
                        </td>
                    }
                    <td>
                        <button class="btn btn-warning"
                        @onclick="@(() => OnEdit.InvokeAsync(item))">
                            Edit
                        </button>
                        <button class="btn btn-danger"
                        @onclick="@(() => OnDelete.InvokeAsync(item))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <span>No data available</span>
}

@code {
    private PropertyInfo[] properties = typeof(GridItemType).GetProperties()
        .Where(x => x.GetCustomAttribute<HiddenAttribute>() == null)
        .ToArray();

    private PageParameters pageParameters = PageParameters.Default;

    [Parameter]
    public Page<GridItemType, IdType>? Page { get; set; }

    [Parameter]
    public EventCallback OnCreate { get; set; }

    [Parameter]
    public EventCallback<GridItemType> OnEdit { get; set; }

    [Parameter]
    public EventCallback<GridItemType> OnDelete { get; set; }

    [Parameter]
    public EventCallback<PageParameters> OnPageRequest { get; set; }

    public async Task RequireColumnSort(PropertyInfo property)
    {
        if (property != null)
        {
            string propertyName = property.Name;

            if (pageParameters.OrderBy != propertyName)
            {
                pageParameters.OrderBy = propertyName;

                var directionAttribute = property.GetCustomAttribute<DefaultOrderDirectionAttribute>();

                var direction = directionAttribute != null ? directionAttribute.Direction : OrderDirection.Ascendent;

                pageParameters.OrderByDirection = direction;
            }
            else
            {
                pageParameters.OrderByDirection =
                    pageParameters.OrderByDirection == OrderDirection.Descendent
                        ? OrderDirection.Ascendent : OrderDirection.Descendent;
            }

            await OnPageRequest.InvokeAsync(pageParameters);
        }

    }

    private MarkupString SetSortIcon(string propertyName)
    {

        if (pageParameters?.OrderBy != null)
        {
            if (pageParameters.OrderBy == propertyName)
            {
                if (pageParameters.OrderByDirection == OrderDirection.Ascendent)
                {
                    return new MarkupString("<span class=\"oi oi-caret-top\"></span>");
                }
                else
                {
                    return new MarkupString("<span class=\"oi oi-caret-bottom\"></span>");
                }
            }
        }


        return new MarkupString();
    }

}
