@typeparam IdType
@typeparam GridItemType where GridItemType: BaseListItem<IdType>

<div class="container">

    <h1>List Items</h1>

    <button class="btn btn-primary mb-4" @onclick="OnCreate">
        Create Item
    </button>

    @if (Page?.Items?.Count > 0)
    {
        <div>
            <div class="row">
                <div class="col">
                    <input type="text" class="form-control"
                       @bind-value="pageParameters.FilterText"
                       @onkeyup="@(async (e) => { if (e.Key == "Enter") await OnPageRequest.InvokeAsync(pageParameters); })" />
                </div>
                <div class="col">
                    <nav>
                        <ul class="pagination">
                            <li role="button" class="page-item @(!Page.First ? "disabled" : null)" @onclick="() => RequestPage(1)">
                                <a class="page-link">First</a>
                            </li>

                            <li role="button" class="page-item @(!Page.First ? "disabled" : null)" @onclick="() => RequestPage(Page.CurrentPage-1)">
                                <a class="page-link">Previous</a>
                            </li>

                            @for(var page = 1; page <= Page.PageCount; page++)
                            {
                                var currentPage = page;
                                <li class="page-item @(Page.CurrentPage == currentPage ? "active" : null)"
                                @onclick="() => RequestPage(currentPage)">
                                <a class="page-link">@currentPage</a>
                                </li>
                            }

                            <li role="button" class="page-item @(!Page.Last ? "disabled" : null)" @onclick="() => RequestPage(Page.CurrentPage+1)">
                                <a class="page-link">Next</a>
                            </li>

                            <li role="button" class="page-item @(!Page.Last ? "disabled" : null)" @onclick="() => RequestPage(Page.PageCount)">
                                <a class="page-link">Last</a>
                            </li>
                        </ul>
                    </nav>

                </div>
            </div>

        </div>

        <table class="table">
            <thead>
                <tr>
                    @foreach (var property in properties)
                    {
                        var display = property.GetCustomAttribute<DisplayAttribute>();
                        <th @onclick="() => RequireColumnSort(property.Name)">
                            <i class="oi
                            @(Page.OrderBy == property.Name
                                ? Page.OrderByDirection == OrderDirection.Ascendent
                                    ? "oi-sort-ascending" : "oi-sort-descending"
                                : null)"></i>
                            @(display == null ? property.Name : display.Name)
                        </th>
                    }
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Page.Items)
                {
                    <tr>
                        @foreach (var property in properties)
                        {
                            var value = property.GetValue(item);
                            var displayFormat = property.GetCustomAttribute<DisplayFormatAttribute>();
                            <td>
                                @(displayFormat?.DataFormatString == null
                    ? value
                    : string.Format(displayFormat.DataFormatString, value))
                            </td>
                        }
                        <td>
                            <button class="btn btn-warning"
                            @onclick="@(() => OnEdit.InvokeAsync(item))">
                                Edit
                            </button>
                            <button class="btn btn-danger"
                            @onclick="@(() => OnDelete.InvokeAsync(item))">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <span>No data available</span>
    }
</div>

@code {
    private PropertyInfo[] properties = typeof(GridItemType).GetProperties()
        .Where(x => x.GetCustomAttribute<HiddenAttribute>() == null)
        .ToArray();

    private PageParameters pageParameters = new PageParameters();

    [Parameter]
    public Page<GridItemType, IdType>? Page { get; set; }

    [Parameter]
    public EventCallback OnCreate { get; set; }

    [Parameter]
    public EventCallback<GridItemType> OnEdit { get; set; }

    [Parameter]
    public EventCallback<GridItemType> OnDelete { get; set; }

    [Parameter]
    public EventCallback<PageParameters> OnPageRequest { get; set; }

    public async Task RequireColumnSort(string propertyName)
    {
        if (pageParameters.OrderBy != propertyName)
        {
            pageParameters.OrderBy = propertyName;
            pageParameters.OrderByDirection = OrderDirection.Descendent;
        }
        else
        {
            pageParameters.OrderByDirection =
                pageParameters.OrderByDirection == OrderDirection.Descendent
                    ? OrderDirection.Ascendent : OrderDirection.Descendent;
        }

        await OnPageRequest.InvokeAsync(pageParameters);
    }

    public async Task RequestPage(int page)
    {
        pageParameters.Page = page;
        await OnPageRequest.InvokeAsync(pageParameters);
    }

}
